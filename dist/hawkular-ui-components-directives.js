/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'directives', version:'32d870c Adding semicolons to make the tslint happy and fix the build.'})} else {HawkularComponentsVersions = [{name:'directives', version:'32d870c Adding semicolons to make the tslint happy and fix the build.'}]};


var Sidebar;
(function (Sidebar) {
    Sidebar.pluginName = "sidebar";
    Sidebar.log = Logger.get(Sidebar.pluginName);
    Sidebar.templatePath = "plugins/sidebar/html/sidebar.html";
    Sidebar.globalTenantId = "test";
    Sidebar.globalEnvironmentId = "test";
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    Sidebar._module = angular.module(Sidebar.pluginName, ['duScroll']);
    Sidebar._module.directive('hawkularSidebar', function () {
        return new Sidebar.SidebarDirective();
    });
    hawtioPluginLoader.addModule(Sidebar.pluginName);
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    var log = Logger.get("Sidebar");
    var SidebarDirective = (function () {
        function SidebarDirective() {
            this.restrict = 'E';
            this.transclude = true;
            this.replace = false;
            this.templateUrl = Sidebar.templatePath;
        }
        return SidebarDirective;
    })();
    Sidebar.SidebarDirective = SidebarDirective;
    Sidebar.SidebarController = Sidebar._module.controller("Sidebar.SidebarController", ['$scope', '$rootScope', '$location', 'HawkularNav', 'HawkularInventory', function ($scope, $rootScope, $location, HawkularNav, HawkularInventory) {
        $scope.isSinglePage = function () {
            return $location.path().indexOf('/metrics') !== 0;
        };
        $scope.isAppServerPage = function () {
            return $location.path().indexOf('/hawkular-ui/app/') === 0;
        };
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
        $scope.rangeNames = {
            '3600000': 'Last Hour',
            '43200000': 'Last 12 Hours',
            '86400000': 'Last Day',
            '604800000': 'Last Week',
            '2592000000': 'Last Month',
            '31536000000': 'Last Year'
        };
        $scope.getFormattedDate = function () {
            var diff = $scope.hkParams.timeOffset;
            $scope.offsetName = $scope.rangeNames[$scope.hkParams.timeOffset] || 'Custom';
            var momStart = moment().subtract($scope.hkParams.timeOffset, 'milliseconds');
            var momEnd = moment();
            if (diff < 24 * 60 * 60 * 1000) {
                return momStart.format('D MMM YYYY') + ' ' + momStart.format('HH:mm') + ' - ' + (momStart.day() !== momEnd.day() ? momEnd.format('D MMM YYYY ') : '') + momEnd.format('HH:mm');
            }
            else {
                return momStart.format('D MMM YYYY') + ' - ' + momEnd.format('D MMM YYYY');
            }
        };
        $scope.setRange = function (range) {
            HawkularNav.setTimestamp(moment.duration(range).valueOf());
        };
        $scope.getUrlFromId = function (id) {
            if (!$scope.resource) {
                $scope.resource = HawkularInventory.Resource.get({ tenantId: Sidebar.globalTenantId, environmentId: Sidebar.globalEnvironmentId, resourceId: id }, function (data) {
                    $scope.resourceName = data.properties.url;
                });
            }
            return $scope.resource;
        };
        $scope.getAppServerFromId = function (id) {
            switch (id) {
                case "f5087d5d26aeff90cc92c738a10d8bba":
                    $scope.resourceName = 'Eavy Machine';
                    break;
                case "5c4785a7a304d32e5f404242666895f5":
                    $scope.resourceName = 'Tori Machine';
                    break;
                case "21193e7941642baa1285cd7edd8af62e":
                    $scope.resourceName = 'Wiko Machine';
                    break;
                case "20a0e9f5d777a16ad40928dd3ba1bef9":
                    $scope.resourceName = 'Tomy Machine';
                    break;
            }
        };
    }]);
})(Sidebar || (Sidebar = {}));

var Topbar;
(function (Topbar) {
    Topbar.pluginName = "topbar";
    Topbar.log = Logger.get(Topbar.pluginName);
    Topbar.templatePath = "plugins/topbar/html/topbar.html";
    Topbar.globalTenantId = "test";
    Topbar.globalEnvironmentId = "test";
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    Topbar._module = angular.module(Topbar.pluginName, ['ngResource', 'hawkular.services', 'ui.bootstrap']);
    Topbar._module.directive('hawkularTopbar', function () {
        return new Topbar.TopbarDirective();
    });
    hawtioPluginLoader.addModule(Topbar.pluginName);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var log = Logger.get("Topbar");
    var TopbarDirective = (function () {
        function TopbarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Topbar.templatePath;
        }
        return TopbarDirective;
    })();
    Topbar.TopbarDirective = TopbarDirective;
    Topbar.TopbarController = Topbar._module.controller("Topbar.TopbarController", ['$scope', '$rootScope', '$location', '$route', '$routeParams', 'HawkularNav', 'HawkularInventory', function ($scope, $rootScope, $location, $route, $routeParams, HawkularNav, HawkularInventory) {
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
    }]);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var HawkularNav = (function () {
        function HawkularNav($rootScope, $route, $routeParams, HawkularInventory) {
            this.$rootScope = $rootScope;
            this.$route = $route;
            this.$routeParams = $routeParams;
            this.HawkularInventory = HawkularInventory;
            $rootScope.hkParams = $routeParams || [];
            var defaultOffset = 1 * 60 * 60 * 1000;
            HawkularInventory.Resource.query({ tenantId: Topbar.globalTenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                $rootScope.hkResources = resourceList;
                for (var i = 0; i < resourceList.length; i++) {
                    if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                        $rootScope.selectedResource = resourceList[i];
                    }
                }
            });
            $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
            $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
            $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
            $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {
                $rootScope.hkParams = current.params;
                $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
                $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
                $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
                HawkularInventory.Resource.query({ tenantId: Topbar.globalTenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                    $rootScope.hkResources = resourceList;
                    for (var i = 0; i < resourceList.length; i++) {
                        if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                            $rootScope.selectedResource = resourceList[i];
                        }
                    }
                });
            }, this);
        }
        HawkularNav.prototype.setTimestamp = function (offset, end) {
            this.$route.updateParams({ timeOffset: offset, endTime: end });
        };
        HawkularNav.$inject = ['$rootScope', '$route', '$routeParams', 'HawkularInventory'];
        return HawkularNav;
    })();
    Topbar.HawkularNav = HawkularNav;
    Topbar._module.service('HawkularNav', HawkularNav);
})(Topbar || (Topbar = {}));

angular.module("hawkular-ui-components-directives-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/sidebar/html/sidebar.html","<!-- <div class=\"col-sm-3 col-md-2 sidebar-pf sidebar-pf-left sidebar-pf-dark sidebar-pf-big-icons sidebar-pf-fixed\">\n  <nav>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" ng-hide=\"isSinglePage()\">\n      <li ng-class=\"getClass(\'/metrics/availability\')\"><a ng-href=\"/metrics/availability/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li ng-class=\"getClass(\'/metrics/response-time\')\"><a ng-href=\"/metrics/response-time/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li ng-class=\"getClass(\'/metrics/alerts\')\"><a ng-href=\"/metrics/alerts/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" du-spy-context  ng-show=\"isSinglePage()\">\n      <li du-scrollspy=\"secav\" offset=\"135\" class=\"active\"><a href=\"#secav\" du-smooth-scroll offset=\"135\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li du-scrollspy=\"secrt\" offset=\"125\"><a href=\"#secrt\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li du-scrollspy=\"secal\" offset=\"125\"><a href=\"#secal\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n  </nav>\n</div> -->\n\n<div class=\"screen-top-nav\">\n  <div>\n    <div class=\"row top-row\">\n      <div class=\"col-sm-4\">\n        <a ng-show=\"isAppServerPage()\" href=\"/hawkular-ui/app/app-list\" class=\"back\">« All Application Servers</a>\n        <a ng-hide=\"isAppServerPage()\" href=\"/hawkular-ui/url/url-list\" class=\"back\">« All URLs</a>\n      </div>\n      <div class=\"col-sm-4\">\n        <h1 ng-init=\"isAppServerPage() ? getAppServerFromId(hkParams.resourceId) : getUrlFromId(hkParams.resourceId)\">{{resourceName}}</h1>\n      </div>\n      <div class=\"col-sm-4\">\n        <div class=\"date-range dropdown\">\n          <i class=\"fa fa-calendar\"></i>\n          <div class=\"input\" dropdown-toggle>\n            {{offsetName}} <span class=\"additional-info\">({{getFormattedDate()}})</span>\n          </div>\n          <div class=\"dropdown-menu infotip bottom-right\">\n            <div class=\"arrow\"></div>\n            <div class=\"dropdown-menu-content\">\n              <span class=\"label\">Last</span>\n              <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Hour\'}\" ng-click=\"setRange({hour: 1})\">1h</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last 12 Hours\'}\" ng-click=\"setRange({hours: 12})\">12h</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Day\'}\" ng-click=\"setRange({day: 1})\">Day</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Week\'}\" ng-click=\"setRange({week: 1})\">Week</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Month\'}\" ng-click=\"setRange({month: 1})\">Month</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Year\'}\" ng-click=\"setRange({year: 1})\">Year</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div ng-transclude></div>\n  </div>\n</div>\n\n");
$templateCache.put("plugins/topbar/html/topbar.html","<ul class=\"nav navbar-nav navbar-primary\">\n  <li ng-class=\"getClass(\'/hawkular-ui/url/\')\">\n    <a href=\"/hawkular-ui/url/url-list\">URLs</a>\n  </li>\n  <li ng-class=\"getClass(\'/hawkular-ui/app/\')\">\n    <a href=\"/hawkular-ui/app/app-list\">Application Servers</a>\n  </li>\n</ul>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-directives-templates");
//# sourceMappingURL=data:application/json;base64,